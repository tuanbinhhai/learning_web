# a= [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590]


# b= [28, 36, 37, 38, 79, 29, 30, 31, 32, 33, 34, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 67, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 89, 96, 97, 98, 99, 100, 101, 103, 104, 106, 108, 109, 110, 118, 120, 121, 122, 123, 128, 129, 130, 131, 133, 140, 141, 156, 157, 158, 159, 161, 172, 177, 178, 179, 180, 188, 189, 191, 192, 193, 194, 195, 199, 201, 202, 203, 205, 206, 207, 213, 214, 216, 224, 227, 234, 247, 251, 252, 253, 254, 256, 257, 258, 259, 261, 265, 266, 267, 270, 271, 272, 276, 277, 283, 284, 289, 291, 292, 293, 305, 306, 318, 329, 330, 332, 338, 341, 342, 343, 344, 345, 346, 350, 355, 357, 358, 361, 365, 367, 369, 375, 377, 381, 384, 385, 388, 389, 402, 406, 407, 408, 416, 417, 419, 436, 440, 441, 442, 444, 447, 449, 453, 454, 455, 460, 469, 472, 478, 489, 490, 493, 495, 498, 499, 507, 509, 511, 512, 513, 16, 17, 18, 68, 1, 2, 4, 15, 22, 27, 166, 297, 308, 476, 3, 21, 24, 63, 66, 69, 70, 71, 72, 73, 76, 90, 91, 102, 113, 115, 127, 138, 152, 155, 160, 162, 176, 197, 208, 209, 217, 219, 221, 226, 231, 238, 239, 246, 262, 281, 290, 304, 309, 328, 339, 347, 359, 370, 371, 374, 396, 410, 415, 423, 425, 433, 437, 438, 439, 445, 446, 450, 470, 471, 479, 516, 517, 518, 519, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 559, 560, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 186, 126, 260, 25, 35, 119, 153, 154, 167, 168, 212, 225, 235, 240, 242, 243, 248, 282, 288, 296, 298, 301, 303, 312, 313, 314, 315, 319, 322, 323, 326, 327, 333, 334, 335, 336, 353, 354, 366, 368, 372, 378, 382, 386, 405, 409, 418, 420, 421, 422, 434, 435, 459, 464, 465, 466, 468, 474, 475, 480, 481, 482, 483, 485, 488, 496, 500, 501, 502, 503, 505, 508, 514, 404, 413, 255, 397, 398, 399, 400, 401, 426, 427, 428, 429, 430, 431, 432, 164, 196, 198, 215, 165, 504, 362, 249, 392, 487, 245, 211, 210, 320, 114, 244, 124, 443, 125, 173, 264, 134, 111, 456, 233, 395, 352, 117, 223, 463, 269, 325, 250, 356, 340, 462, 228, 324, 376, 411, 373, 477, 174, 285, 310, 135, 175, 222, 230, 232, 241, 351, 457, 185, 268, 279, 137, 163, 183, 220, 510, 132, 295, 218, 424, 181, 204, 278, 263, 311, 112, 182, 200, 387, 184, 275, 379, 287, 316, 451, 452, 294, 331, 286, 360, 26, 151, 5, 6, 7, 8, 9, 10, 11, 12, 13, 19, 20, 23, 62, 84, 87, 88, 92, 93, 94, 95, 105, 107, 116, 136, 139, 169, 170, 171, 229, 236, 237, 273, 274, 280, 302, 307, 337, 348, 363, 364, 380, 391, 393, 394, 448, 458, 461, 473, 486, 494, 497, 506, 522, 532, 558, 578, 579]
# c = a - b
# puts "BBBBBBBBBBBB:#{c}"
# def my_method2
#    yield("Qu√¢n", "27")
# end
#
#  my_method2 do |name, age|
#     p "#{name} is #{age} years old"
#  end
#
#  # p my_method2
# class Candy
#     def land
#         homer
#     end
#
#     private
#
#     def method_private1
#         p "private1"
#     end
#
# end
#
# def homer
#     puts "Hello"
# end
#
# p Candy.private_method_defined? :method_private1
# # p Candy.new.send(:homer) #Outputs Hello
# # p Candy.new.method(:homer).call #Outputs Hello
# # ==========================================
# p "  ".blank? # t
# p "  ".empty?

#Example1: Given a string "Sort words in a sentence", it should return "a in Sort words sentence".
def sort_string(string)
  string.split(' ').sort{|x, y| x.length <=> y.length}.join(" ")
end
p sort_string("Sort words in a sentence")

#Example 2: "Tuan tran thanh" => word "tuan" => count 1, [9,3,4,9,5].count(9) Will return the value 2
def find_frequency(sentence, word)
  sentence.downcase.split.count(word)
end
p find_frequency("Sort words in a sentence a", "a")

#Example 3: Given an array [1, 2, 3, 4, 5] and 2 should return two random numbers from the given array. (Note: those two random numbers may be the same number.) The method should return those random values in a new array.
def random_select(array, n)
  result = []
  n.times do
    result << array[rand(array.length)]
  end
  result
end

#Example 4:Given "Never odd or even" the method should return true
def palindrome?(sentence)
  downcase_stripped_sentence = sentence.downcase.gsub(" ", "")
  downcase_stripped_sentence  ==  downcase_stripped_sentence.reverse
end

#Example 5: Given range 1 to 3 the method should return 36
def sum_of_cubes(a, b)
  (a..b).inject(0){ |sum, x| sum += (x*x*x)}
end

#Example 6:

CAPS_STARTING_POSITION = "A".ord
CAPS_ENDING_POSITION = "Z".ord
LOWER_STARTING_POSITION = "a".ord
LOWER_ENDING_POSITION = "z".ord

def caesar_cipher (input, shift_factor)
	output = ""
	input.split("").each do |character|
			if character.ord.between?(CAPS_STARTING_POSITION, CAPS_ENDING_POSITION)
				character = ((((character.ord - CAPS_STARTING_POSITION) + shift_factor) % 26) + CAPS_STARTING_POSITION).chr
			elsif character.ord.between?(LOWER_STARTING_POSITION, LOWER_ENDING_POSITION)
				character = ((((character.ord - LOWER_STARTING_POSITION) + shift_factor) % 26) + LOWER_STARTING_POSITION).chr
			end
			output << character
	end
	output
end
puts caesar_cipher("What a string!", 5)

# Example 7: > stock_picker([17,3,6,9,15,8,6,1,10]) => [1,4]  # for a profit of $15 - $3 == $12
def stock_picker(prices)
  min_day, max_day, profit = 0,0,0
  price_length = prices.length - 1

  arr_day = []
  (1..price_length).each do |i|
    (0..i).each do |day|
      if prices[i] - prices[day] > profit
        profit,min_day,max_day = prices[i] - prices[day], day, i
      end
    end
  end
  arr_day << {:min_day => min_day, :max_day => max_day}
end
puts stock_picker([17,3,6,9,15,8,6,1,10])
